// <auto-generated />
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace MagicOnion
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::MagicOnion;
    using global::MagicOnion.Client;

    public static partial class MagicOnionInitializer
    {
        static bool isRegistered = false;

        [UnityEngine.RuntimeInitializeOnLoadMethod(UnityEngine.RuntimeInitializeLoadType.BeforeSceneLoad)]
        public static void Register()
        {
            if(isRegistered) return;
            isRegistered = true;

            MagicOnionClientRegistry<YourGameServer.Interface.IAccountService>.Register((x, y, z) => new YourGameServer.Interface.AccountServiceClient(x, y, z));

        }
    }
}

#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 612
#pragma warning restore 618
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace MagicOnion.Resolvers
{
    using System;
    using MessagePack;

    public class MagicOnionResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new MagicOnionResolver();

        MagicOnionResolver()
        {

        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.formatter;
        }

        static class FormatterCache<T>
        {
            public static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> formatter;

            static FormatterCache()
            {
                var f = MagicOnionResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class MagicOnionResolverGetFormatterHelper
    {
        static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static MagicOnionResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(0)
            {
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 612
#pragma warning restore 618
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace YourGameServer.Interface {
    using System;
    using MagicOnion;
    using MagicOnion.Client;
    using Grpc.Core;
    using MessagePack;

    [Ignore]
    public class AccountServiceClient : MagicOnionClientBase<global::YourGameServer.Interface.IAccountService>, global::YourGameServer.Interface.IAccountService
    {
        static readonly Method<byte[], byte[]> SignUpMethod;
        static readonly Func<RequestContext, ResponseContext> SignUpDelegate;
        static readonly Method<byte[], byte[]> LogInMethod;
        static readonly Func<RequestContext, ResponseContext> LogInDelegate;
        static readonly Method<byte[], byte[]> RenewTokenMethod;
        static readonly Func<RequestContext, ResponseContext> RenewTokenDelegate;
        static readonly Method<byte[], byte[]> LogOutMethod;
        static readonly Func<RequestContext, ResponseContext> LogOutDelegate;

        static AccountServiceClient()
        {
            SignUpMethod = new Method<byte[], byte[]>(MethodType.Unary, "IAccountService", "SignUp", MagicOnionMarshallers.ThroughMarshaller, MagicOnionMarshallers.ThroughMarshaller);
            SignUpDelegate = _SignUp;
            LogInMethod = new Method<byte[], byte[]>(MethodType.Unary, "IAccountService", "LogIn", MagicOnionMarshallers.ThroughMarshaller, MagicOnionMarshallers.ThroughMarshaller);
            LogInDelegate = _LogIn;
            RenewTokenMethod = new Method<byte[], byte[]>(MethodType.Unary, "IAccountService", "RenewToken", MagicOnionMarshallers.ThroughMarshaller, MagicOnionMarshallers.ThroughMarshaller);
            RenewTokenDelegate = _RenewToken;
            LogOutMethod = new Method<byte[], byte[]>(MethodType.Unary, "IAccountService", "LogOut", MagicOnionMarshallers.ThroughMarshaller, MagicOnionMarshallers.ThroughMarshaller);
            LogOutDelegate = _LogOut;
        }

        AccountServiceClient()
        {
        }

        public AccountServiceClient(CallInvoker callInvoker, MessagePackSerializerOptions serializerOptions, IClientFilter[] filters)
            : base(callInvoker, serializerOptions, filters)
        {
        }

        protected override MagicOnionClientBase<IAccountService> Clone()
        {
            var clone = new AccountServiceClient();
            clone.host = this.host;
            clone.option = this.option;
            clone.callInvoker = this.callInvoker;
            clone.serializerOptions = this.serializerOptions;
            clone.filters = filters;
            return clone;
        }

        public new IAccountService WithHeaders(Metadata headers)
        {
            return base.WithHeaders(headers);
        }

        public new IAccountService WithCancellationToken(System.Threading.CancellationToken cancellationToken)
        {
            return base.WithCancellationToken(cancellationToken);
        }

        public new IAccountService WithDeadline(System.DateTime deadline)
        {
            return base.WithDeadline(deadline);
        }

        public new IAccountService WithHost(string host)
        {
            return base.WithHost(host);
        }

        public new IAccountService WithOptions(CallOptions option)
        {
            return base.WithOptions(option);
        }
   
        static ResponseContext _SignUp(RequestContext __context)
        {
            return CreateResponseContext<SignInRequest, SignInRequestResult>(__context, SignUpMethod);
        }

        public global::MagicOnion.UnaryResult<SignInRequestResult> SignUp(SignInRequest signup)
        {
            return InvokeAsync<SignInRequest, SignInRequestResult>("IAccountService/SignUp", signup, SignUpDelegate);
        }
        static ResponseContext _LogIn(RequestContext __context)
        {
            return CreateResponseContext<LogInRequest, LogInRequestResult>(__context, LogInMethod);
        }

        public global::MagicOnion.UnaryResult<LogInRequestResult> LogIn(LogInRequest param)
        {
            return InvokeAsync<LogInRequest, LogInRequestResult>("IAccountService/LogIn", param, LogInDelegate);
        }
        static ResponseContext _RenewToken(RequestContext __context)
        {
            return CreateResponseContext<RenewTokenRequestResult>(__context, RenewTokenMethod);
        }

        public global::MagicOnion.UnaryResult<RenewTokenRequestResult> RenewToken()
        {
            return InvokeAsync<Nil, RenewTokenRequestResult>("IAccountService/RenewToken", Nil.Default, RenewTokenDelegate);
        }
        static ResponseContext _LogOut(RequestContext __context)
        {
            return CreateResponseContext<global::MessagePack.Nil>(__context, LogOutMethod);
        }

        public global::MagicOnion.UnaryResult<global::MessagePack.Nil> LogOut()
        {
            return InvokeAsync<Nil, global::MessagePack.Nil>("IAccountService/LogOut", Nil.Default, LogOutDelegate);
        }
    }
}

#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 612
#pragma warning restore 618
