// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(22)
            {
                { typeof(global::YourGameServer.Models.ConsumableOrigin), 0 },
                { typeof(global::YourGameServer.Models.ConsumableStatus), 1 },
                { typeof(global::YourGameServer.Models.DeviceType), 2 },
                { typeof(global::YourGameServer.Models.PlayerAccountKind), 3 },
                { typeof(global::YourGameServer.Models.PlayerAccountStatus), 4 },
                { typeof(global::YourGameServer.Models.ServiceTicketKind), 5 },
                { typeof(global::YourGameServer.Models.AccountCreationRequest), 6 },
                { typeof(global::YourGameServer.Models.AccountCreationResult), 7 },
                { typeof(global::YourGameServer.Models.IconBlob), 8 },
                { typeof(global::YourGameServer.Models.LootBox), 9 },
                { typeof(global::YourGameServer.Models.MaskedPlayerAccount), 10 },
                { typeof(global::YourGameServer.Models.MaskedPlayerProfile), 11 },
                { typeof(global::YourGameServer.Models.PlayerAccount), 12 },
                { typeof(global::YourGameServer.Models.PlayerDevice), 13 },
                { typeof(global::YourGameServer.Models.PlayerOwnedFreeServiceToken), 14 },
                { typeof(global::YourGameServer.Models.PlayerOwnedPaidServiceToken), 15 },
                { typeof(global::YourGameServer.Models.PlayerOwnedServiceTicket), 16 },
                { typeof(global::YourGameServer.Models.PlayerProfile), 17 },
                { typeof(global::YourGameServer.Models.ServiceTicket), 18 },
                { typeof(global::YourGameServer.Models.ServiceToken), 19 },
                { typeof(global::YourGameServer.Models.TokenRequest), 20 },
                { typeof(global::YourGameServer.Models.TokenRequestResult), 21 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new MessagePack.Formatters.YourGameServer.Models.ConsumableOriginFormatter();
                case 1: return new MessagePack.Formatters.YourGameServer.Models.ConsumableStatusFormatter();
                case 2: return new MessagePack.Formatters.YourGameServer.Models.DeviceTypeFormatter();
                case 3: return new MessagePack.Formatters.YourGameServer.Models.PlayerAccountKindFormatter();
                case 4: return new MessagePack.Formatters.YourGameServer.Models.PlayerAccountStatusFormatter();
                case 5: return new MessagePack.Formatters.YourGameServer.Models.ServiceTicketKindFormatter();
                case 6: return new MessagePack.Formatters.YourGameServer.Models.AccountCreationRequestFormatter();
                case 7: return new MessagePack.Formatters.YourGameServer.Models.AccountCreationResultFormatter();
                case 8: return new MessagePack.Formatters.YourGameServer.Models.IconBlobFormatter();
                case 9: return new MessagePack.Formatters.YourGameServer.Models.LootBoxFormatter();
                case 10: return new MessagePack.Formatters.YourGameServer.Models.MaskedPlayerAccountFormatter();
                case 11: return new MessagePack.Formatters.YourGameServer.Models.MaskedPlayerProfileFormatter();
                case 12: return new MessagePack.Formatters.YourGameServer.Models.PlayerAccountFormatter();
                case 13: return new MessagePack.Formatters.YourGameServer.Models.PlayerDeviceFormatter();
                case 14: return new MessagePack.Formatters.YourGameServer.Models.PlayerOwnedFreeServiceTokenFormatter();
                case 15: return new MessagePack.Formatters.YourGameServer.Models.PlayerOwnedPaidServiceTokenFormatter();
                case 16: return new MessagePack.Formatters.YourGameServer.Models.PlayerOwnedServiceTicketFormatter();
                case 17: return new MessagePack.Formatters.YourGameServer.Models.PlayerProfileFormatter();
                case 18: return new MessagePack.Formatters.YourGameServer.Models.ServiceTicketFormatter();
                case 19: return new MessagePack.Formatters.YourGameServer.Models.ServiceTokenFormatter();
                case 20: return new MessagePack.Formatters.YourGameServer.Models.TokenRequestFormatter();
                case 21: return new MessagePack.Formatters.YourGameServer.Models.TokenRequestResultFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.YourGameServer.Models
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class ConsumableOriginFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.ConsumableOrigin>
    {
        public void Serialize(ref MessagePackWriter writer, global::YourGameServer.Models.ConsumableOrigin value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::YourGameServer.Models.ConsumableOrigin Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::YourGameServer.Models.ConsumableOrigin)reader.ReadInt32();
        }
    }

    public sealed class ConsumableStatusFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.ConsumableStatus>
    {
        public void Serialize(ref MessagePackWriter writer, global::YourGameServer.Models.ConsumableStatus value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::YourGameServer.Models.ConsumableStatus Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::YourGameServer.Models.ConsumableStatus)reader.ReadInt32();
        }
    }

    public sealed class DeviceTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.DeviceType>
    {
        public void Serialize(ref MessagePackWriter writer, global::YourGameServer.Models.DeviceType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::YourGameServer.Models.DeviceType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::YourGameServer.Models.DeviceType)reader.ReadInt32();
        }
    }

    public sealed class PlayerAccountKindFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.PlayerAccountKind>
    {
        public void Serialize(ref MessagePackWriter writer, global::YourGameServer.Models.PlayerAccountKind value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::YourGameServer.Models.PlayerAccountKind Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::YourGameServer.Models.PlayerAccountKind)reader.ReadInt32();
        }
    }

    public sealed class PlayerAccountStatusFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.PlayerAccountStatus>
    {
        public void Serialize(ref MessagePackWriter writer, global::YourGameServer.Models.PlayerAccountStatus value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::YourGameServer.Models.PlayerAccountStatus Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::YourGameServer.Models.PlayerAccountStatus)reader.ReadInt32();
        }
    }

    public sealed class ServiceTicketKindFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.ServiceTicketKind>
    {
        public void Serialize(ref MessagePackWriter writer, global::YourGameServer.Models.ServiceTicketKind value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::YourGameServer.Models.ServiceTicketKind Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::YourGameServer.Models.ServiceTicketKind)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.YourGameServer.Models
{
    using global::System.Buffers;
    using global::MessagePack;
    public sealed class AccountCreationRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.AccountCreationRequest>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::YourGameServer.Models.AccountCreationRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.DeviceType>().Serialize(ref writer, value.DeviceType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DeviceId, options);
        }

        public global::YourGameServer.Models.AccountCreationRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __DeviceType__ = default(global::YourGameServer.Models.DeviceType);
            var __DeviceId__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __DeviceType__ = formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.DeviceType>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __DeviceId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::YourGameServer.Models.AccountCreationRequest() {
                DeviceType = __DeviceType__,
                DeviceId = __DeviceId__,
            };
            reader.Depth--;
            return ____result;
        }
    }
    public sealed class AccountCreationResultFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.AccountCreationResult>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::YourGameServer.Models.AccountCreationResult value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.Id);
            writer.Write(value.DeviceId);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Token, options);
        }

        public global::YourGameServer.Models.AccountCreationResult Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(ulong);
            var __DeviceId__ = default(ulong);
            var __Token__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = reader.ReadUInt64();
                        break;
                    case 1:
                        __DeviceId__ = reader.ReadUInt64();
                        break;
                    case 2:
                        __Token__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::YourGameServer.Models.AccountCreationResult() {
                Id = __Id__,
                DeviceId = __DeviceId__,
                Token = __Token__,
            };
            reader.Depth--;
            return ____result;
        }
    }
    public sealed class IconBlobFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.IconBlob>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::YourGameServer.Models.IconBlob value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.address, options);
        }

        public global::YourGameServer.Models.IconBlob Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::YourGameServer.Models.IconBlob();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.address = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }
    public sealed class LootBoxFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.LootBox>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::YourGameServer.Models.LootBox value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            writer.Write(value.Id);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ProductName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DisplayName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.IconAddress, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.BannerAddress, options);
        }

        public global::YourGameServer.Models.LootBox Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::YourGameServer.Models.LootBox();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Id = reader.ReadUInt64();
                        break;
                    case 1:
                        ____result.Name = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.ProductName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.DisplayName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.Description = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.IconAddress = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.BannerAddress = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }
    public sealed class MaskedPlayerAccountFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.MaskedPlayerAccount>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::YourGameServer.Models.MaskedPlayerAccount value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.Write(value.Id);
            formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.PlayerAccountStatus>().Serialize(ref writer, value.Status, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.Since, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.LastLogin, options);
            formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.MaskedPlayerProfile>().Serialize(ref writer, value.Profile, options);
        }

        public global::YourGameServer.Models.MaskedPlayerAccount Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(ulong);
            var __Status__ = default(global::YourGameServer.Models.PlayerAccountStatus);
            var __Since__ = default(global::System.DateTime?);
            var __LastLogin__ = default(global::System.DateTime?);
            var __Profile__ = default(global::YourGameServer.Models.MaskedPlayerProfile);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = reader.ReadUInt64();
                        break;
                    case 1:
                        __Status__ = formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.PlayerAccountStatus>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Since__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __LastLogin__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Profile__ = formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.MaskedPlayerProfile>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::YourGameServer.Models.MaskedPlayerAccount() {
                Id = __Id__,
                Status = __Status__,
                Since = __Since__,
                LastLogin = __LastLogin__,
                Profile = __Profile__,
            };
            reader.Depth--;
            return ____result;
        }
    }
    public sealed class MaskedPlayerProfileFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.MaskedPlayerProfile>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::YourGameServer.Models.MaskedPlayerProfile value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Motto, options);
            writer.Write(value.IconBlobId);
        }

        public global::YourGameServer.Models.MaskedPlayerProfile Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::YourGameServer.Models.MaskedPlayerProfile();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Name = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.Motto = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.IconBlobId = reader.ReadUInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }
    public sealed class PlayerAccountFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.PlayerAccount>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::YourGameServer.Models.PlayerAccount value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            writer.Write(value.Id);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Code, options);
            formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.PlayerAccountKind>().Serialize(ref writer, value.Kind, options);
            formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.PlayerAccountStatus>().Serialize(ref writer, value.Status, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.Since, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.LastLogin, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.InactivateDate, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.BanDate, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.ExpireDate, options);
        }

        public global::YourGameServer.Models.PlayerAccount Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(ulong);
            var __Code__ = default(string);
            var __Kind__ = default(global::YourGameServer.Models.PlayerAccountKind);
            var __Status__ = default(global::YourGameServer.Models.PlayerAccountStatus);
            var __Since__ = default(global::System.DateTime?);
            var __LastLogin__ = default(global::System.DateTime?);
            var __InactivateDate__ = default(global::System.DateTime?);
            var __BanDate__ = default(global::System.DateTime?);
            var __ExpireDate__ = default(global::System.DateTime?);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = reader.ReadUInt64();
                        break;
                    case 1:
                        __Code__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Kind__ = formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.PlayerAccountKind>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Status__ = formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.PlayerAccountStatus>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Since__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __LastLogin__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __InactivateDate__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __BanDate__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __ExpireDate__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::YourGameServer.Models.PlayerAccount() {
                Id = __Id__,
                Code = __Code__,
                Kind = __Kind__,
                Status = __Status__,
                Since = __Since__,
                LastLogin = __LastLogin__,
                InactivateDate = __InactivateDate__,
                BanDate = __BanDate__,
                ExpireDate = __ExpireDate__,
            };
            reader.Depth--;
            return ____result;
        }
    }
    public sealed class PlayerDeviceFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.PlayerDevice>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::YourGameServer.Models.PlayerDevice value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            writer.Write(value.Id);
            writer.Write(value.OwnerId);
            formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.DeviceType>().Serialize(ref writer, value.DeviceType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DeviceId, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.Since, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.LastUsed, options);
        }

        public global::YourGameServer.Models.PlayerDevice Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(ulong);
            var __OwnerId__ = default(ulong);
            var __DeviceType__ = default(global::YourGameServer.Models.DeviceType);
            var __DeviceId__ = default(string);
            var __Since__ = default(global::System.DateTime?);
            var __LastUsed__ = default(global::System.DateTime?);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = reader.ReadUInt64();
                        break;
                    case 1:
                        __OwnerId__ = reader.ReadUInt64();
                        break;
                    case 2:
                        __DeviceType__ = formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.DeviceType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __DeviceId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Since__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __LastUsed__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::YourGameServer.Models.PlayerDevice() {
                Id = __Id__,
                OwnerId = __OwnerId__,
                DeviceType = __DeviceType__,
                DeviceId = __DeviceId__,
                Since = __Since__,
                LastUsed = __LastUsed__,
            };
            reader.Depth--;
            return ____result;
        }
    }
    public sealed class PlayerOwnedFreeServiceTokenFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.PlayerOwnedFreeServiceToken>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::YourGameServer.Models.PlayerOwnedFreeServiceToken value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            writer.Write(value.Id);
            writer.Write(value.OwnerId);
            formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.ConsumableOrigin>().Serialize(ref writer, value.Origin, options);
            formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.ConsumableStatus>().Serialize(ref writer, value.Status, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.Period, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.UsedDate, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.InvalidateDate, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.ExpireDate, options);
        }

        public global::YourGameServer.Models.PlayerOwnedFreeServiceToken Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(ulong);
            var __OwnerId__ = default(ulong);
            var __Origin__ = default(global::YourGameServer.Models.ConsumableOrigin);
            var __Status__ = default(global::YourGameServer.Models.ConsumableStatus);
            var __Period__ = default(global::System.DateTime?);
            var __UsedDate__ = default(global::System.DateTime?);
            var __InvalidateDate__ = default(global::System.DateTime?);
            var __ExpireDate__ = default(global::System.DateTime?);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = reader.ReadUInt64();
                        break;
                    case 1:
                        __OwnerId__ = reader.ReadUInt64();
                        break;
                    case 2:
                        __Origin__ = formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.ConsumableOrigin>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Status__ = formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.ConsumableStatus>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Period__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __UsedDate__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __InvalidateDate__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __ExpireDate__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::YourGameServer.Models.PlayerOwnedFreeServiceToken() {
                Id = __Id__,
                OwnerId = __OwnerId__,
                Origin = __Origin__,
                Status = __Status__,
                Period = __Period__,
                UsedDate = __UsedDate__,
                InvalidateDate = __InvalidateDate__,
                ExpireDate = __ExpireDate__,
            };
            reader.Depth--;
            return ____result;
        }
    }
    public sealed class PlayerOwnedPaidServiceTokenFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.PlayerOwnedPaidServiceToken>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::YourGameServer.Models.PlayerOwnedPaidServiceToken value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            writer.Write(value.Id);
            writer.Write(value.OwnerId);
            formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.ServiceToken>().Serialize(ref writer, value.ServiceToken, options);
            formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.ConsumableOrigin>().Serialize(ref writer, value.Origin, options);
            formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.ConsumableStatus>().Serialize(ref writer, value.Status, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.Period, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.UsedDate, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.InvalidateDate, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.ExpireDate, options);
        }

        public global::YourGameServer.Models.PlayerOwnedPaidServiceToken Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(ulong);
            var __OwnerId__ = default(ulong);
            var __ServiceToken__ = default(global::YourGameServer.Models.ServiceToken);
            var __Origin__ = default(global::YourGameServer.Models.ConsumableOrigin);
            var __Status__ = default(global::YourGameServer.Models.ConsumableStatus);
            var __Period__ = default(global::System.DateTime?);
            var __UsedDate__ = default(global::System.DateTime?);
            var __InvalidateDate__ = default(global::System.DateTime?);
            var __ExpireDate__ = default(global::System.DateTime?);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = reader.ReadUInt64();
                        break;
                    case 1:
                        __OwnerId__ = reader.ReadUInt64();
                        break;
                    case 2:
                        __ServiceToken__ = formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.ServiceToken>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Origin__ = formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.ConsumableOrigin>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Status__ = formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.ConsumableStatus>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Period__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __UsedDate__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __InvalidateDate__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __ExpireDate__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::YourGameServer.Models.PlayerOwnedPaidServiceToken() {
                Id = __Id__,
                OwnerId = __OwnerId__,
                ServiceToken = __ServiceToken__,
                Origin = __Origin__,
                Status = __Status__,
                Period = __Period__,
                UsedDate = __UsedDate__,
                InvalidateDate = __InvalidateDate__,
                ExpireDate = __ExpireDate__,
            };
            reader.Depth--;
            return ____result;
        }
    }
    public sealed class PlayerOwnedServiceTicketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.PlayerOwnedServiceTicket>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::YourGameServer.Models.PlayerOwnedServiceTicket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            writer.Write(value.Id);
            writer.Write(value.OwnerId);
            formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.ServiceTicket>().Serialize(ref writer, value.ServiceTicket, options);
            formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.ConsumableOrigin>().Serialize(ref writer, value.Origin, options);
            formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.ConsumableStatus>().Serialize(ref writer, value.Status, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.Period, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.UsedDate, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.InvalidateDate, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.ExpireDate, options);
        }

        public global::YourGameServer.Models.PlayerOwnedServiceTicket Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(ulong);
            var __OwnerId__ = default(ulong);
            var __ServiceTicket__ = default(global::YourGameServer.Models.ServiceTicket);
            var __Origin__ = default(global::YourGameServer.Models.ConsumableOrigin);
            var __Status__ = default(global::YourGameServer.Models.ConsumableStatus);
            var __Period__ = default(global::System.DateTime?);
            var __UsedDate__ = default(global::System.DateTime?);
            var __InvalidateDate__ = default(global::System.DateTime?);
            var __ExpireDate__ = default(global::System.DateTime?);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = reader.ReadUInt64();
                        break;
                    case 1:
                        __OwnerId__ = reader.ReadUInt64();
                        break;
                    case 2:
                        __ServiceTicket__ = formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.ServiceTicket>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Origin__ = formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.ConsumableOrigin>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Status__ = formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.ConsumableStatus>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Period__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __UsedDate__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __InvalidateDate__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __ExpireDate__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::YourGameServer.Models.PlayerOwnedServiceTicket() {
                Id = __Id__,
                OwnerId = __OwnerId__,
                ServiceTicket = __ServiceTicket__,
                Origin = __Origin__,
                Status = __Status__,
                Period = __Period__,
                UsedDate = __UsedDate__,
                InvalidateDate = __InvalidateDate__,
                ExpireDate = __ExpireDate__,
            };
            reader.Depth--;
            return ____result;
        }
    }
    public sealed class PlayerProfileFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.PlayerProfile>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::YourGameServer.Models.PlayerProfile value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            writer.Write(value.Id);
            writer.Write(value.OwnerId);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Serialize(ref writer, value.LastUpdate, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Motto, options);
            writer.Write(value.IconBlobId);
        }

        public global::YourGameServer.Models.PlayerProfile Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(ulong);
            var __OwnerId__ = default(ulong);
            var __LastUpdate__ = default(global::System.DateTime?);
            var __Name__ = default(string);
            var __Motto__ = default(string);
            var __IconBlobId__ = default(ulong);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = reader.ReadUInt64();
                        break;
                    case 1:
                        __OwnerId__ = reader.ReadUInt64();
                        break;
                    case 2:
                        __LastUpdate__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime?>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Motto__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __IconBlobId__ = reader.ReadUInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::YourGameServer.Models.PlayerProfile() {
                Id = __Id__,
                OwnerId = __OwnerId__,
                LastUpdate = __LastUpdate__,
                Name = __Name__,
                Motto = __Motto__,
                IconBlobId = __IconBlobId__,
            };
            reader.Depth--;
            return ____result;
        }
    }
    public sealed class ServiceTicketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.ServiceTicket>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::YourGameServer.Models.ServiceTicket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            writer.Write(value.Id);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.ServiceTicketKind>().Serialize(ref writer, value.Kind, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ProductName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DisplayName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
            writer.Write(value.DetailId);
            writer.Write(value.IconBlobId);
        }

        public global::YourGameServer.Models.ServiceTicket Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::YourGameServer.Models.ServiceTicket();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Id = reader.ReadUInt64();
                        break;
                    case 1:
                        ____result.Name = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.Kind = formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.ServiceTicketKind>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.ProductName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.DisplayName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.Description = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.DetailId = reader.ReadUInt64();
                        break;
                    case 7:
                        ____result.IconBlobId = reader.ReadUInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }
    public sealed class ServiceTokenFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.ServiceToken>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::YourGameServer.Models.ServiceToken value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            writer.Write(value.Id);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ProductName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DisplayName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
            writer.Write(value.IconBlobId);
        }

        public global::YourGameServer.Models.ServiceToken Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::YourGameServer.Models.ServiceToken();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Id = reader.ReadUInt64();
                        break;
                    case 1:
                        ____result.Name = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.ProductName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.DisplayName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.Description = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.IconBlobId = reader.ReadUInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }
    public sealed class TokenRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.TokenRequest>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::YourGameServer.Models.TokenRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.Id);
            formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.DeviceType>().Serialize(ref writer, value.DeviceType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DeviceId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.NewDeviceId, options);
        }

        public global::YourGameServer.Models.TokenRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(ulong);
            var __DeviceType__ = default(global::YourGameServer.Models.DeviceType);
            var __DeviceId__ = default(string);
            var __NewDeviceId__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = reader.ReadUInt64();
                        break;
                    case 1:
                        __DeviceType__ = formatterResolver.GetFormatterWithVerify<global::YourGameServer.Models.DeviceType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __DeviceId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __NewDeviceId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::YourGameServer.Models.TokenRequest() {
                Id = __Id__,
                DeviceType = __DeviceType__,
                DeviceId = __DeviceId__,
                NewDeviceId = __NewDeviceId__,
            };
            reader.Depth--;
            return ____result;
        }
    }
    public sealed class TokenRequestResultFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::YourGameServer.Models.TokenRequestResult>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::YourGameServer.Models.TokenRequestResult value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.DeviceId);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Token, options);
        }

        public global::YourGameServer.Models.TokenRequestResult Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __DeviceId__ = default(ulong);
            var __Token__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __DeviceId__ = reader.ReadUInt64();
                        break;
                    case 1:
                        __Token__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::YourGameServer.Models.TokenRequestResult() {
                DeviceId = __DeviceId__,
                Token = __Token__,
            };
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

